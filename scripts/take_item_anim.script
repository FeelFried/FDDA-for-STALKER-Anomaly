 --[[
item pickup animation script
Author: Feel_Fried
--]]
local skin_anim, harv_usage_snd
local bool_to_number={ [true]=1, [false]=0 }
local ltx = ini_file("items\\items\\anims_loot_list.ltx")

function on_game_start()
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("on_option_change", loadsettings)
end

function actor_on_first_update()
	RegisterScriptCallback("actor_on_item_take",actor_on_item_take)
	loadsettings()
end

function loadsettings()
	if ui_mcm then
		enable_animations = ui_mcm.get("EA_settings/enable_animations")
		default_dist = ui_mcm.get("EA_settings/take_dist")
	else
		enable_animations = ui_options.get("video/player/animations")
		default_dist = 0.12
	end
end

function actor_on_item_take(item)
	local itemv = item:position()
	local actorv = db.actor:position()
	local dist = actorv:distance_to(itemv)
	--item pickup animation
	local checkrun = level.actor_moving_state()
	local check = bool_to_number[not enhanced_animations.used_item] + bool_to_number[not anim_used] + bool_to_number[not enhanced_animations.fake_monster] + bool_to_number[enable_animations] + ((string.sub(item:section(),1,4) == 'anim') and 0 or 1) + ((checkrun >= 2000) and 0 or 1)
	if ( dist > default_dist ) and check == 6 then
		game.play_hud_motion(db.actor:active_slot()==0 and 2 or 1, "item_ea_take_hud", "anm_ea_take", true, 1.4)
		anim_used = true
		CreateTimeEvent("anim_delay", "anim_delay", 0.5, anim_delay)
	end
	checkrun ,check ,itemv ,actorv ,dist = nil
	--mutant loot bag animation
	if enhanced_animations.fake_monster then
		fov_anim_manager.change_fov(0.45)
		enhanced_animations.fake_monster = nil
		level.disable_input()
		local sect = item:section()
		local item_sect_index = ltx:section_exist(sect) and ltx:r_string_ex(sect, "indx"):match("(.+),(.+)") or math.random(14)
		local anim_section_name = "item_ea_harv_meat_"..item_sect_index.."_hud"
		harv_usage_snd = sound_object("interface\\item_usage\\harvest_use_success")
		harv_usage_snd:play(db.actor, 0, sound_object.s2d)
		game.play_hud_motion(2, anim_section_name, "anm_ea_show", true, 0.75)
		level.add_cam_effector("itemuse_anm_effects\\harvest_loot.anm", 8560, false, "")
		CreateTimeEvent("restore_knife", "restor_knife", 1.8 , restore_knife)
		skin_anim = true
		item_sect_index ,anim_section_name ,sect = nil
	end
end

function anim_delay()
	anim_used = false
	return true
end

--patching mutant loot dialog close call
function ui_mutant_loot.UIMutantLoot:Close()
	--deleting fake mutant object to prevent bag animation if mutant was empty
	CreateTimeEvent("delete_fake", "delete_fake", 0.2, take_item_anim.delete_fake)
	self:SetMutantState()
	self:HideDialog()
	Unregister_UI("UIMutantLoot")
end

function delete_fake()
	enhanced_animations.fake_monster = nil
	--draw knife if mutant was empty or player just closed dialog without looting anything
	if not skin_anim then
		return_slots()
	end
	return true
end

function restore_knife()
	return_slots()
	skin_anim = nil
	level.enable_input()
	return true
end

function return_slots()
	fov_anim_manager.restore_fov()
	db.actor:activate_slot(1)
	local device = enhanced_animations.det_active
	if device then device:switch_state(1) end
	device = nil
end
