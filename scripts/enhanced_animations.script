--[[
--------------------PLEASE DO NOT DELETE THIS SECTION---------------------------
================================================================================
Script(enhanced_animations) original:
\\Author		:	thales100
================================================================================

Animations authors: LilGABE,denis2000,ValeroK,STRIFER,Feel_Fried

================================================================================
Script(enhanced_animations) reworked:
Adaptation and crooked rework for Anomaly =): Feel_Fried

Engine functions consultants: Amomawy devs - Lucy, tdef, Tronex

Monkey patches and mask effect switcher implementation: RavenAscendant

Main shitcode critic: Igigog
================================================================================

Addon main page:

https://www.moddb.com/mods/stalker-anomaly/addons/food-drug-and-drinks-animations-reuploaded

================================================================================

All your base are belong to us! (⌐■_■)
]]--
local ini_eff = {}
local active_slot,anim_section,anim_exist_tm,wpn,item_usage_snd,monster_usage_snd,item,anim_use_time,obj_m,used_monster = nil
used_item,ea_flag,fake_monster,det_active,used_monster = nil

function on_game_start()
	RegisterScriptCallback("on_game_load",on_game_load)
end

function on_game_load()
	activate()
end

--< Addon control
function activate()
	ini_eff = ini_file("items\\items\\animations_settings.ltx")
	RegisterScriptCallback("monster_on_actor_use_callback",monster_on_actor_use)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
end

function deactivate()
--< trash manager
	active_slot,anim_section,anim_exist_tm,wpn,item_usage_snd,monster_usage_snd,item,anim_use_time,obj_m,used_monster,used_item,used_monster,ini_eff = nil
-- trash manager >--
	UnregisterScriptCallback("monster_on_actor_use_callback", monster_on_actor_use)
	UnregisterScriptCallback("actor_on_first_update",actor_on_first_update)
	UnregisterScriptCallback("actor_on_update", actor_on_update)
end
-- Addon control >--

--< Animations engine
function anim_prepare()
	game.only_allow_movekeys(true)
	hide_det()
	active_slot = db.actor:active_slot()
	anim_exist_tm = nil
	db.actor:restore_weapon()
	db.actor:activate_slot(0)
	game.only_allow_movekeys(true)
	RegisterScriptCallback("actor_on_update", actor_on_update)
end

function use_item(obj)
	item = obj:section()
	obj_m = obj
	hide_hud_inventory()
	used_item = item
	anim_section = ini_eff:r_string_ex(item, "anm")
	mask_hud_switcher()
	anim_prepare()
end

function monster_on_actor_use(obj)
	local enable_animations = ui_options.get("video/player/animations")
	local mutant_ini = ini_eff:r_bool("anim_settings", "mutant_loot_mod")
	if (not mutant_ini) or (not enable_animations) then
		used_monster = nil
		anim_exist_tm = nil
		return
	end
	wpn = db.actor:active_item()
	if wpn then
		wpn = wpn:section()
		wpn = string.gsub(wpn,"-","_")
	end
	item_knife.degradate()
	used_monster = obj
	anim_section = "item_ea_harv_wpn_knife"
	level.disable_input()
	anim_prepare()
	recalc_actor_campos()
end

function start_anim(anim_section_hud)
	UnregisterScriptCallback("actor_on_update", actor_on_update)
	fov_anim_manager.change_fov(0.45)
	game.play_hud_motion(2, anim_section_hud, "anm_ea_show", false, 1)
	if used_item then
		item_usage_snd = sound_object(ini_eff:r_string_ex(used_item, "snd"))
		item_usage_snd:play(db.actor, 0, sound_object.s2d)
		level.add_cam_effector(ini_eff:r_string_ex(used_item, "cam"), 8555, false, "")
		tmr = ini_eff:r_float_ex(used_item, "tm")
		anim_exist_tm = tmr*0.001
		anim_use_time = anim_exist_tm*0.367
		CreateTimeEvent("ea_object_eater", "eat_my_obj", anim_use_time, eat_my_obj)
		CreateTimeEvent("ea_slot_returner", "call_my_slot_back", (anim_exist_tm + 0.1), call_my_slot_back)
		if ciga_effects then
			if (string.sub(used_item,1,4) == 'ciga') then ciga_effects.ciga_start() end
		end
		alife_create_item("items_anm_dummy",db.actor)
	elseif used_monster then
		monster_usage_snd = sound_object(ini_eff:r_string_ex(anim_section, "anim_sound"))
		monster_usage_snd:play(db.actor, 0, sound_object.s2d)
		level.add_cam_effector("itemuse_anm_effects\\harvest_skin_use.anm", 8558, false, "")
		level.add_cam_effector("itemuse_anm_effects\\test.anm", 8559, false, "")
		tmr = ini_eff:r_float_ex(anim_section, "anim_length")
		anim_exist_tm = tmr*0.001
		CreateTimeEvent("ea_slot_returner", "call_my_slot_back", (anim_exist_tm + 0.5), call_my_slot_back)
	end
	CreateTimeEvent("ea_anim_stoper", "stop_my_anim", anim_exist_tm, stop_my_anim)
end

function actor_on_update()
	if db.actor:active_slot() == 0 and not db.actor:active_detector() then
	local anim_section_hud = nil
		if used_monster then
			anim_section_hud = "item_ea_harv_" .. ( wpn or "wpn_knife5" ) .. "_hud"
		else
			anim_section_hud = anim_section .. "_hud"
		end
		start_anim(anim_section_hud)
	end
end
-- Animations engine >--

--< Monkey patches
--preventing default Anomaly anims
local originalPIF = actor_effects.play_item_fx
function actor_effects.play_item_fx(item)
	local enable_animations = ui_options.get("video/player/animations")
	if ini_eff:r_string_ex(item, "snd") and enable_animations or ini_eff:r_string_ex("skip_items", item) then return end
	originalPIF(item)
end

--delaying item use
local originalAOIBU = itms_manager.actor_on_item_before_use
function itms_manager.actor_on_item_before_use(obj,flags)
	originalAOIBU(obj,flags)
	local item = obj:section()
	local enable_animations = ui_options.get("video/player/animations")
	if ini_eff:r_string_ex(item, "snd") and enable_animations and flags.ret_value then
		use_item(obj)
		flags.ret_value = false
		return
	end
end

--delaying mutant loot dialog
local originalUMLS = ui_mutant_loot.start
function ui_mutant_loot.start(obj, for_bug1, for_bug2)
	local enable_animations = ui_options.get("video/player/animations")
	local mutant_ini = ini_eff:r_bool("anim_settings", "mutant_loot_mod")
	if not ea_flag and enable_animations and mutant_ini then return end
	originalUMLS(obj, for_bug1, for_bug2)
end
-- Monkey patches >--

--< Time Events
function call_my_slot_back()
	game.only_allow_movekeys(false)
	if take_item_anim then
		if not fake_monster then
			db.actor:activate_slot(active_slot or 0)
			if det_active then det_active:switch_state(1) end
		end
	else
		db.actor:activate_slot(active_slot or 0)
		if det_active then det_active:switch_state(1) end
	end
	return true
end

--eating fake item to stop default items sound and delayed item using
function eat_my_obj()
	db.actor:eat(obj_m)
	db.actor:eat(db.actor:object("items_anm_dummy"))
	return true
end

function stop_my_anim()
	db.actor:hide_weapon()
	fov_anim_manager.restore_fov()
	level.enable_input()
	if used_item then
		mask_hud_switcher()
		used_item = nil
		obj_m = nil
	elseif used_monster:id() ~= 65535 then
		fake_monster = used_monster
		used_monster = nil
		ea_flag = true
		ui_mutant_loot.start(fake_monster, fake_monster:id(), fake_monster:section(), fake_monster:clsid())
		ea_flag = nil
		if not ui_mutant_loot.GUI:Reset(fake_monster, fake_monster:id(), fake_monster:section(), fake_monster:clsid()) then
			fake_monster = nil
		end
	end
	used_monster = nil
	return true
end
-- Time Events >--

--< Additional animations and effects
function mask_hud_switcher()
	if (not ini_eff:r_bool_ex(used_item, "helm")) and ui_options.get("video/player/mask_hud") then
		actor_effects.switch_helm() --raven
		actor_effects.Update_Mask(db.actor)
	end
end

--holster item in device slot
function hide_det()
	det_active = db.actor:active_detector() or nil
	if det_active then det_active:switch_state(2) end
end

function actor_on_first_update()
	if db.actor:object("items_anm_dummy") then alife_release(db.actor:object("items_anm_dummy")) end
end

--addaptive camera for mutant skinning
function recalc_actor_campos()
	local pm = used_monster:bone_position('bip01_spine1')
	pm.y = pm.y + 0.8
	db.actor:actor_look_at_point(pm)
end
-- Additional animations and effects >--
