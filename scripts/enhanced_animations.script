--[[
IF YOU ARE POSTING THIS SCRIPT ON A THIRD PARTY RESOURCES PLEASE DO NOT DELETE THIS SECTION
Script(enhanced_animations) original:
\\Author		:	thales100

Animations author: LilGABE (as far as I understend author of most of animations from LADC pack)

Adaptation and crooked rework for Anomaly =): Feel_Fried

Engine functions consultants: Amomawy devs - Lucy, tdef, Tronex 

Monkey patches and mask effect switcher implementation: RavenAscendant

Main shitcode critic: Igigog

Addon main page: https://www.moddb.com/mods/stalker-anomaly/addons/food-drug-and-drinks-animations-for-anomaly/

All your base are belong to us! (⌐■_■) 
]]--
local ini_eff = {}
local active_slot,anim_section,anim_exist_tm,wpn,item_usage_snd, monster_usage_snd,item, anim_use_time,obj_m 
used_item,used_monster = false

function on_game_start()
	RegisterScriptCallback("on_game_load",on_game_load)
end

function on_game_load()
--< restore hud_fov
	hud_fov = ui_options.get("video/basic/hud_fov")
	restore_fov()
-- restore hud_fov >--
	activate()
end

--< Addon controll
function activate()
--printf(prefix.."activated")
	ini_eff = ini_file("items\\items\\animtions_settings.ltx")
    RegisterScriptCallback("monster_on_actor_use_callback",monster_on_actor_use)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
end

function deactivate()
--< trash manager
	active_slot,anim_section,anim_exist_tm,wpn,item_usage_snd, monster_usage_snd,item, anim_use_time,obj_m,used_item,used_monster,ini_eff = nil
-- trash manager >--
    UnregisterScriptCallback("monster_on_actor_use_callback", monster_on_actor_use)
	UnregisterScriptCallback("actor_on_first_update",actor_on_first_update)
end
-- Addon controll >--

--< Animations engine
function use_item(obj)
	item = obj:section()
	obj_m = obj
	hide_det()
	hide_hud_inventory()
	RegisterScriptCallback("actor_on_update",update)
	wpn = db.actor:active_item() --Получаем активное оружие в руках
	if wpn then
		wpn = wpn:section()
		wpn = string.gsub(wpn,"-","_")
	end

	game.only_allow_movekeys(true)
	used_item = item --предмет, который будет использован
	active_slot = db.actor:active_slot() --активный слот до использования предмета
	anim_section = ini_eff:r_string_ex(item, "anm")
	anim_exist_tm = nil
	mask_hud_switcher()
	db.actor:activate_slot(0)
end

function monster_on_actor_use(obj)
	local enable_animations = ui_options.get("video/player/animations")
	local mutant_ini = ini_eff:r_bool("anim_settings", "mutant_loot_mod")
    if (not mutant_ini) or (not enable_animations) then
        used_monster = nil
        anim_exist_tm = nil
        return
    end
	hide_det()
    wpn = db.actor:active_item() --Получаем активное оружие в руках
    if wpn then
        wpn = wpn:section()
        wpn = string.gsub(wpn, "-", "_")
    --printf(wpn)
    end

    used_monster = obj
    active_slot = db.actor:active_slot() --активный слот до использования предмета

    anim_section = "anm_harv_wpn_knife"
    RegisterScriptCallback("actor_on_update", update)
    anim_exist_tm = nil
    level.add_cam_effector("itemuse_anm_effects\\harvest_lean_down_main_headbob.anm", 8561, false, "")
	db.actor:activate_slot(0)
	game.only_allow_movekeys(true)
end

function start_anim(anim_section_hud)
	UnregisterScriptCallback("actor_on_update", update)
    --< set default hud_fov
    hud_fov = ui_options.get("video/basic/hud_fov")
    if hud_fov ~= 0.45 then
        exec_console_cmd("hud_fov 0.45")
    end
    -- set default hud_fov  >--
    game.play_hud_motion(2, anim_section_hud, "anm_show", false, 1) -- run anim visual

    local tmr
    --Если используется предмет
	if used_item then
		--< create anim effects
        item_usage_snd = sound_object(ini_eff:r_string_ex(used_item, "snd"))
        item_usage_snd:play(db.actor, 0, sound_object.s2d)
        level.add_cam_effector(ini_eff:r_string_ex(used_item, "cam"), 8555, false, "")
		-- create anim effects >--
        tmr = ini_eff:r_string_ex(used_item, "tm")
        anim_exist_tm = tmr*0.001
        anim_use_time = anim_exist_tm*0.367
		CreateTimeEvent(0, "eat_my_obj", anim_use_time, eat_my_obj)
		CreateTimeEvent(0, "call_my_slot_back", (anim_exist_tm + 0.1), call_my_slot_back)
		if (anim_exist_tm == 39) then
        RegisterScriptCallback("actor_on_update", ciga_effects.update)
        ciga_effects.ciga_start()
		end
		alife():create("items_anm_dummy",db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),db.actor:id())
    elseif used_monster then
        if ini_eff:r_string_ex(anim_section, "anim_sound") then --Если существует указатель на звук
            monster_usage_snd = sound_object(ini_eff:r_string_ex(anim_section, "anim_sound"))
            monster_usage_snd:play(db.actor, 0, sound_object.s2d)
            level.add_cam_effector("itemuse_anm_effects\\harvest_skin_use.anm", 8558, false, "")
        end

        local checkcrouch = level.actor_moving_state()
		local TEMP = nil
        if checkcrouch == 0 then
            TEMP = "itemuse_anm_effects\\test.anm" --Запуск анимации приседания для свежевания
        else
            TEMP = "itemuse_anm_effects\\harvest_lean_down_main.anm"
        end
		level.add_cam_effector(TEMP, 8559, false, "")
        tmr = ini_eff:r_float_ex(anim_section, "anim_length")
        anim_exist_tm = tmr*0.001
		CreateTimeEvent(0, "call_my_slot_back", (anim_exist_tm + 0.5), call_my_slot_back)
    end
	CreateTimeEvent(0, "stop_my_anim", anim_exist_tm, stop_my_anim)
end

function update()

	if db.actor:active_slot() == 0 and not db.actor:active_detector() then
	local anim_section_hud = nil
		if used_monster then
			anim_section_hud = "anm_harv_" .. ( wpn or "wpn_knife5" ) .. "_hud"
		else
			anim_section_hud = anim_section .. "_hud"
		end
		start_anim(anim_section_hud)
	end

end
-- Animations engine >--

--< Monkey patches
orginalPIF = actor_effects.play_item_fx

function actor_effects.play_item_fx(item)
	local enable_animations = ui_options.get("video/player/animations")
	if ini_eff:r_string_ex(item, "snd") and enable_animations then return end
	if item == "items_anm_dummy" then return end
	if (item == "mutant_looting_boost_2") or (item == "mutant_looting_boost_1") or (item == "mutant_looting") then return end
	orginalPIF(item)
end

OriginalAOIBU = itms_manager.actor_on_item_before_use

function itms_manager.actor_on_item_before_use(obj,flags)
	OriginalAOIBU(obj,flags)
	local item = obj:section()
	local enable_animations = ui_options.get("video/player/animations")
	if  ini_eff:r_string_ex(item, "snd") and enable_animations and  flags.ret_value then
		use_item(obj)
		flags.ret_value = false
		return
	end
end

function ui_mutant_loot.UIMutantLoot:Close()
	if enhanced_animations.used_monster then level.disable_input() end
	self:SetMutantState()
	self:HideDialog()	
	Unregister_UI("UIMutantLoot")
end
-- Monkey patches >--

--< Time Events
function call_my_slot_back()
	game.only_allow_movekeys(false)
	db.actor:activate_slot(active_slot or 0)
    if det_active then
		det_active:switch_state(1)
    end
	return true
end

function eat_my_obj()
	db.actor:eat(obj_m)
	db.actor:eat(db.actor:object("items_anm_dummy"))
	return true
end

function stop_my_anim()
	if used_item then
		level.enable_input() --Вернуть управление
		restore_fov()
		db.actor:activate_slot(active_slot or 0)
		mask_hud_switcher()
		--Очистка переменных
		used_item = nil
		--Время существования мутанта
	elseif used_monster then
		level.enable_input() --Вернуть управление
		restore_fov()
		--Очистка переменных
		used_monster = nil
	end
	return true
end
-- Time Events >--

--< Additional animations and effects 
function mask_hud_switcher()
	if (ini_eff:r_string_ex(used_item, "helm") == "false") and ui_options.get("video/player/mask_hud") then
		actor_effects.switch_helm() --raven
		actor_effects.Update_Mask(db.actor)
	end
end

function restore_fov()
    if hud_fov ~= 0.45 then
        exec_console_cmd("hud_fov " .. hud_fov)
    end
end

function hide_det()
det_active = db.actor:active_detector() or nil
    if det_active then
		det_active:switch_state(2)
    end
end

function actor_on_first_update()
	if db.actor:object("items_anm_dummy") then
		db.actor:eat(db.actor:object("items_anm_dummy"))
	end
end
-- Additional animations and effects >--