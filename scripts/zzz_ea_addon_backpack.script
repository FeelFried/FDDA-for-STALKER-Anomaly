
local ini_eff = {}
local fov_prev,active_slot,item_after_backpack
ini_eff = ini_file("items\\items\\ea_addon_backpack.ltx")

function backpack_m_open(name)
	if enhanced_animations.used_item then return end
	if not db.actor or not db.actor:alive() then
		return
	end
	if name == "inventory" then
		backpack_open()
	end
end

function backpack_m_close(name)
	if fov_prev then
		exec_console_cmd("hud_fov " .. fov_prev)
		fov_prev = nil
	end
	if name == "UIInventory" and active_slot then
		item_after_backpack = true
	end
	if enhanced_animations.used_item then return end
	if not db.actor or not db.actor:alive() then
		return
	end
	if name == "UIInventory" then
		backpack_close()
	end
end

function backpack_open()
	active_slot = db.actor:active_slot()
	det_active = db.actor:active_detector() or nil
	printf(active_slot)
	level.disable_input()
	recalc_actor_campos()
	enhanced_animations.used_item = "backpack_open"
	enhanced_animations.anim_section = ini_eff:r_string_ex(enhanced_animations.used_item, "anm")
	enhanced_animations.anim_prepare()
end

function recalc_actor_campos()
	local dir2 = device().cam_dir
	local pos = device().cam_pos
	pos.y = pos.y - 0.5
	pos.x = pos.x + dir2.x
	pos.z = pos.z + dir2.z
	db.actor:actor_look_at_point(pos)
end

function backpack_close()
	enhanced_animations.used_item = "backpack_close"
	enhanced_animations.anim_section = ini_eff:r_string_ex(enhanced_animations.used_item, "anm")
	enhanced_animations.anim_prepare()
end

function EA_anim_stop(used_item)
	if used_item == "backpack_open" then
		fov_prev = axr_main.config:r_value("temp", "fov_value", 2)
		fov_anim_manager.change_fov(0.45)
		game.play_hud_motion(2, "item_ea_backpack_open_hud", "anm_ea_idle", false, 1)
		level.enable_input()
		ea_invent_flag = true
		RemoveTimeEvent("ea_slot_returner", "call_my_slot_back")
		ui_inventory.start("inventory")
		game.only_allow_movekeys(false)
	end
end

function ea_on_item_use(used_item,tm)
	if used_item == "backpack_close" then
		CreateTimeEvent("ea_b_slot_returner", "b_call_my_slot_back", (tm + 0.55), call_my_slot_back)
		return
	end
	if item_after_backpack then
		CreateTimeEvent("ea_b_slot_returner", "b_call_my_slot_back", (tm + 0.3), call_my_slot_back)
		item_after_backpack = nil
	end
end

function call_my_slot_back()
	printf(active_slot.." called")
	if det_active then
		det_active:switch_state(1)
		det_active = nil
	end
	db.actor:activate_slot(active_slot or 0)
	active_slot = nil
	item_after_backpack = nil
	return true
end


local originalUIinvenory_start =ui_inventory.start
function ui_inventory.start(mode, obj)
	if mode == "inventory" and ea_invent_flag == nil then return end
	if ea_invent_flag then ea_invent_flag = nil end
	originalUIinvenory_start(mode, obj)
end

function on_game_start()
	RegisterScriptCallback("ActorMenu_on_before_init_mode",backpack_m_open)
	RegisterScriptCallback("GUI_on_hide",backpack_m_close)
	ea_callbacks.EA_RegisterScriptCallback("ea_on_item_anim_stop",EA_anim_stop)
	ea_callbacks.EA_RegisterScriptCallback("ea_on_item_use",ea_on_item_use)
end
